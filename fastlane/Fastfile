# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

fastlane_require 'dotenv'

before_all do
  # ensure_git_branch
  # ensure_git_status_clean
  # Dotenv.overload '../.env'
  # git_pull
  setup_circle_ci
end

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test", project_dir: 'android/')
  end

  lane :clean do
    gradle(task: 'clean', project_dir: 'android/')
 end

  lane :assemble do |options|
    gradle(
       task: 'assemble',
       build_type: options[:build_type].capitalize(),
       project_dir: 'android/',
       flavor: ENV['ENV'],
       system_properties: {
        "ENVFILE": ".env.#{ENV['ENV']}"
      }
    )
    ENV["GRADLE_APK_OUTPUT_PATH_#{ENV['ENV']}"] = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
 end

 lane :bundle do
  gradle(
     task: "bundle",
     build_type: "Release",
     project_dir: 'android/',
     flavor: ENV['ENV'],
     system_properties: {
      "ENVFILE": ".env.#{ENV['ENV']}"
    }
 )
 ENV["GRADLE_AAB_OUTPUT_PATH_#{ENV['ENV']}"] = lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH]
end

  desc 'Update build version number android'
  lane :bump_version do |options|
    latest_release = 1
    version_name = android_get_version_name(
      gradle_file: "./android/app/build.gradle"
    )
    if ENV["ENV"] === 'prod'
      latest_release += google_play_track_version_codes(
        track: 'internal',
        package_name: 'org.bettersocial',
        json_key: 'fastlane/playstore-api-key.json'
      )[0]
    else
      firebase_release = firebase_app_distribution_get_latest_release(
          app: ENV["FIREBASE_APP_ID_ANDROID"],
          firebase_cli_token: ENV["FIREBASE_CLI_TOKEN"],
      )
      latest_release += firebase_release[:buildVersion].to_i
    end
    ENV['APP_VERSION'] = "#{version_name}(#{latest_release})"
  end

  desc 'Build and Release android'
  lane :release do |options|
    begin
      bump_version
      if ENV["ENV"] === 'prod'
        bundle
        upload_to_play_store_internal_testing
        upload_aab_to_firebase_distribution(release_notes: options[:release_notes])
      else
      puts 'testing'
        assemble(build_type: options[:build_type])
        upload_apk_to_firebase_distribution(release_notes: options[:release_notes], build_type: options[:build_type])
      end
    rescue => exception
      puts exception
    end
  end

  desc 'Build and upload to firebase distribution'
  lane :upload_aab_to_firebase_distribution do |options|
      firebase_app_distribution(
          app: ENV["FIREBASE_APP_ID_ANDROID"],
          groups: ENV["FIREBASE_DISTRIBUTION_GROUP_LIST"],
          android_artifact_type: "AAB",
          android_artifact_path: ENV["GRADLE_AAB_OUTPUT_PATH_#{ENV['ENV']}"],
          firebase_cli_token: ENV["FIREBASE_CLI_TOKEN"],
          release_notes: "BUILD_TYPE: #{options[:build_type]}, BRANCH: #{ENV["CIRCLE_BRANCH"]}. #{options[:release_notes]}"
      )
  end

  lane :upload_apk_to_firebase_distribution do |options|
    firebase_app_distribution(
        app: ENV["FIREBASE_APP_ID_ANDROID"],
        groups: ENV["FIREBASE_DISTRIBUTION_GROUP_LIST"],
        apk_path: ENV["GRADLE_APK_OUTPUT_PATH_#{ENV['ENV']}"],
        firebase_cli_token: ENV["FIREBASE_CLI_TOKEN"],
        release_notes: "BRANCH: #{ENV["CIRCLE_BRANCH"]}. #{options[:release_notes]}"
    )
  end


  desc 'upload to playstore internal testing'
  lane :upload_to_play_store_internal_testing do |options|
    upload_to_play_store(
        track: 'internal',
        skip_upload_apk: true,
        aab: ENV["GRADLE_APK_OUTPUT_PATH_#{ENV['ENV']}"],
        json_key: 'fastlane/playstore-api-key.json',
        package_name: 'org.bettersocial'
    )
  end


  platform :ios do
    desc 'Signing cert'
    lane :signing do |options|
     profileType = 'appstore'
     if options[:type] === 'AdHoc'
       profileType = 'adhoc'
     elsif options[:type] === 'Development'
       profileType = 'development'
     end
     match(
      type: profileType, # "appstore" | "adhoc" | "development"
      app_identifier: [ENV["BUNDLE_ID"]],
      readonly:true,
      verbose:true
     )
    update_code_signing_settings(
        use_automatic_signing: true,
        path: './ios/BetterSocial.xcodeproj',
        targets: ENV["SCHEME"],
        team_id: 'J22M3M9VYU'
      )
    end

    desc 'register udid to apple developer'
    lane :register_new_device do |options|
      app_store_connect_api_key(
        key_id: ENV["APPCONNECT_KEY_ID"],
        issuer_id: ENV["APPCONNECT_ISSUE_ID"],
        key_filepath: 'fastlane/appconnect-api-key.p8'
      )
      keys = options[:name].split(/,/)
      values = options[:udid].split(/,/)
      zipped = keys.zip(values)
      register_devices(
        devices: Hash[zipped]
      )
      update_cert(type:options[:type])
      ENV['REGISTER_DEVICE_NAME'] = options[:name]
      ENV['REGISTER_DEVICE_UDID'] = options[:udid]
      ENV['REGISTER_TYPE'] = options[:type] || "adhoc"
      on_success_device_register_slack
    end

    desc 'update certificate in apple developer and repo ios certificate'
    lane :update_cert do |options|
      match(
       type: options[:type] || "adhoc", # "appstore" | "adhoc" | "development"
       app_identifier: "#{ENV["APP_IDENTIFIER_LIST"]}",
       verbose:true,
       force: true,
       username: ENV["APPCONNECT_USERNAME"],
      )
    end

    desc 'Update build version number ios'
    lane :bump_version do |options|
      latest_release = 1
      current_version = get_version_number(
        xcodeproj: './ios/BetterSocial.xcodeproj',
        target: ENV["SCHEME"]
      )
      if ENV["ENV"] === 'prod'
        app_store_connect_api_key(
          key_id: ENV["APPCONNECT_KEY_ID"],
          issuer_id: ENV["APPCONNECT_ISSUE_ID"],
          key_filepath: 'fastlane/appconnect-api-key.p8'
        )
        latest_testflight_build = latest_testflight_build_number(
          version: current_version,
          app_identifier: 'org.bettersocial',
          initial_build_number: 0
        )
        latest_release += latest_testflight_build
      else
        firebase_release = firebase_app_distribution_get_latest_release(
          app: ENV["FIREBASE_APP_ID_IOS"],
          firebase_cli_token: ENV["FIREBASE_CLI_TOKEN"],
        )
        latest_release += firebase_release[:buildVersion].to_i
      end
      increment_build_number({
        xcodeproj: './ios/BetterSocial.xcodeproj',
        build_number: latest_release,
        skip_info_plist: true
      })
      ENV['APP_VERSION'] = "#{current_version}(#{latest_release})"
    end

    desc 'release ios'
    lane :release do |options|
      begin
        bump_version
        build
      rescue => exception
        puts exception
      end
    end

    lane :build do |options|
      profile_name_type = 'AdHoc'
      matchType = 'adhoc'
      profileType = 'ad-hoc'
      if ENV["ENV"] === 'prod'
        profile_name_type = 'AppStore'
        matchType = 'appstore'
        profileType = 'ad-hoc'
      end
      match(
        type: matchType, # "appstore" | "adhoc" | "development"
        app_identifier: [ENV["BUNDLE_ID"]],
        readonly: true,
        verbose: true
      )
      update_code_signing_settings(
        path: './ios/BetterSocial.xcodeproj',
        targets: ENV["SCHEME"],
        profile_name: "match #{profile_name_type} #{ENV["BUNDLE_ID"]}",
        team_id: 'J22M3M9VYU'
      )
      puts "testing #{profile_name_type} #{matchType}"
      build_ios_app(
              scheme: ENV["SCHEME"],
              clean: true,
              configuration: 'Release',
              export_team_id: 'J22M3M9VYU',
              export_options: {
                  method: profileType, # "ad-hoc" | "app-store"
                  provisioningProfiles: {
                      ENV["SCHEME"] => "match #{profile_name_type} #{ENV["SCHEME"]}",
                  }
              },
              workspace: './ios/BetterSocial.xcworkspace',
              output_directory: './ios/',
            )
      ENV["IPA_OUTPUT_PATH_#{ENV['ENV']}"] = lane_context[SharedValues::IPA_OUTPUT_PATH]
      end

      desc 'Build and upload to firebase distribution'
        lane :upload_ipa_to_firebase_distribution do |options|
            firebase_app_distribution(
                app: ENV["FIREBASE_APP_ID_IOS"],
                groups: ENV["FIREBASE_DISTRIBUTION_GROUP_LIST"],
                ipa_path:"./ios/#{ENV["SCHEME"]}.ipa",
                firebase_cli_token: ENV["FIREBASE_CLI_TOKEN"],
                release_notes: "BRANCH: #{ENV["CIRCLE_BRANCH"]}. #{options[:release_notes]}"
            )
        end
      desc 'Build and upload to Test Flight for Beta Testing.'
      lane :upload_testflight do |options|
          app_store_connect_api_key(
            key_id: ENV["APPCONNECT_KEY_ID"],
            issuer_id: ENV["APPCONNECT_ISSUE_ID"],
            key_filepath: 'fastlane/appconnect-api-key.p8'
          )
          upload_to_testflight(
            skip_waiting_for_build_processing: true,
            username: ENV["APPCONNECT_USERNAME"],
            app_identifier: 'org.bettersocial',
            ipa: './ios/BetterSocial.ipa'
          )
      end
    end
end

platform :general do
    desc 'Create git release tag'
    lane :release_tag do |options|
        version_name = android_get_version_name(
          gradle_file: "./android/app/build.gradle"
        )
        last_tag = last_git_tag()
        puts "lastTag #{last_tag}"
    end
end

def on_success_device_register_slack
  post_to_slack(
        channel: ENV['SLACK_DEFAULT_CHANNEL'],
        message: "JOB SUCCESS :male-technologist:",
        success: true,
        default_payloads: [:git_branch, :git_author],
        attachment_properties: {
          fields: [
            {
              title: "Name",
              value: ENV['CIRCLE_JOB'],
              short: false
            },
            {
              title: "Device Name",
              value: ENV['REGISTER_DEVICE_NAME'],
              short: true
            },
            {
              title: "Device UDID",
              value: ENV['REGISTER_DEVICE_UDID'],
              short: true
            },
            {
              title: "type",
              value: ENV['REGISTER_TYPE'],
              short: false
            },
        ]
        }
      )
end

def on_success_slack
  post_to_slack(
        channel: ENV['SLACK_DEFAULT_CHANNEL'],
        message: "JOB SUCCESS :white_check_mark:",
        success: true,
        default_payloads: [:last_git_commit_hash, :git_branch, :git_author],
        attachment_properties: {
          fields: [
            {
              title: "JOB",
              value: ENV['CIRCLE_JOB'],
              short: false
            },
            {
              title: "ENV",
              value: ENV['ENV'],
              short: true
            },
            {
              title: "Version",
              value: ENV['APP_VERSION'],
              short: true
            },
            {
              title: "Mentions",
              value: ENV['SLACK_MENTIONS_SUCCESS'],
              short: false
            },
        ]
        }
      )
end
def on_error_slack(exception)
      post_to_slack(
        channel: ENV['SLACK_DEFAULT_CHANNEL'],
        message: "JOB FAILED :red_circle:",
        success: false,
        default_payloads: [:last_git_commit_hash, :git_branch, :git_author],
        attachment_properties: {
          fields: [
            {
              title: "JOB",
              value: ENV['CIRCLE_JOB'],
              short: false
            },
            {
            title: "Error message",
            value: exception.to_s,
            short: false
            },
            {
              title: "ENV",
              value: ENV['ENV'],
              short: true
            },
            {
              title: "Version",
              value: ENV['APP_VERSION'],
              short: true
            },
            {
              title: "Mentions",
              value: ENV['SLACK_MENTIONS_FAIL'],
              short: false
            },
        ]
        }
      )
end
